#mysql -u root

create database testproject;
create user 'testproject-admin'@'localhost' identified by 'iniP@ssw0rd!';
grant all privileges on testproject.*  to 'testproject-admin'@'localhost';

use testproject;

create table mst_item(
    uid	varchar(50) not null primary key,
    item_code	varchar(50) unique,
    item_name	varchar(100),
    price	decimal(26,4),
    rowstatus	int(11),
    created_by	varchar(100),
    created_date	datetime,
    modified_by	varchar(100),
    modified_date	datetime
);

ALTER TABLE `testproject`.`mst_item` 
ADD COLUMN `item_type` VARCHAR(50) NULL DEFAULT NULL AFTER `price`;

create table mst_item_recipe(
    uid	varchar(50) not null primary key,
    item_uid	varchar(50),
    item_code	varchar(50),
    item_name	varchar(100),
    bahan_uid	varchar(50),
    bahan_code	varchar(50),
    bahan_name	varchar(100),
    qty			decimal(26, 4),
    unit_code	varchar(50),
    rowstatus	int(11),
    created_by	varchar(100),
    created_date	datetime,
    modified_by	varchar(100),
    modified_date	datetime
);

create table mst_bahan(
	uid varchar(50) not null primary key,
    bahan_code varchar(50) unique,
    bahan_name varchar(50),
    stock_qty decimal(26, 4),
    rowstatus	int(11),
    created_by	varchar(100),
    created_date	datetime,
    modified_by	varchar(100),
    modified_date	datetime
);

create table mst_unit(
	uid varchar(50) not null primary key,
    unit_code varchar(50) unique,
    unit_name varchar(50),
    rowstatus	int(11),
    created_by	varchar(100),
    created_date	datetime,
    modified_by	varchar(100),
    modified_date	datetime
)

create table trans_order(
    uid	varchar(50) not null primary key,
    order_code 	varchar(50) unique,
    order_date 	datetime,
    total_item	int,
    total_price	numeric(26, 4),
    close_order	int,
    rowstatus	int(11),
    created_by	varchar(100),
    created_date	datetime,
    modified_by	varchar(100),
    modified_date	datetime
);

create table trans_order_detail(
    uid	varchar(50) not null primary key,
    order_uid 	varchar(50),
    order_code 	varchar(50),
    order_date 	datetime,
    item_uid	varchar(50),
    item_code	varchar(50),
    item_name	varchar(100),
    item_type	varchar(50),
    qty			decimal(26, 4),
    rowstatus	int(11),
    created_by	varchar(100),
    created_date	datetime,
    modified_by	varchar(100),
    modified_date	datetime
);


USE `testproject`;
DROP procedure IF EXISTS `proc_AutoCounter`;

USE `testproject`;
DROP procedure IF EXISTS `testproject`.`proc_AutoCounter`;
;

DELIMITER $$
USE `testproject`$$
CREATE DEFINER=`testproject-admin`@`localhost` PROCEDURE `proc_AutoCounter`(
	IN FieldName VARCHAR(500),
    IN TableName VARCHAR(500),
    IN FieldCriteria VARCHAR(500),
    IN ValueCriteria VARCHAR(500),
    IN LengthOfString INT,
    IN NumericOnly INT
)
BEGIN
	SET @SQL = CONCAT(
		'SELECT ', FieldName,
        ' INTO @col FROM ', TableName,
        ' WHERE ', FieldCriteria, ' LIKE \'', ValueCriteria, '%\''
    ); 
    
    IF NumericOnly = 1 THEN
		SET @SQL = CONCAT(
			@SQL, ' AND ', FieldCriteria, ' NOT LIKE \'%[aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ]%\''
        );
    END IF;
    
    SET @SQL = CONCAT(
		@SQL, ' ORDER BY ', FieldName, ' DESC LIMIT 1 '
    );
    
    #CREATE TEMPORARY TABLE tbl(Col VARCHAR(500));
    PREPARE stmt FROM @SQL;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
    
    IF EXISTS(SELECT @col) THEN
		SET @str2 = @col;
        SET @StartFrom = length(ValueCriteria) + 1;
        SET @EndUntil = length(@str2) - @StartFrom + 1;
        
        SET @str2 = ifnull(cast(substring(@str2, @StartFrom, @EndUntil) + 1 AS CHAR(500)), '1');
    END IF;
    
    SET @i = 0;
    SET @str = '';
    WHILE(@i < (LengthOfString - length(@str2))) DO
		SET @str = CONCAT(@str, '0');
        SET @i = @i + 1;
    END WHILE;
    SET @str = CONCAT(ValueCriteria, @str, @str2);
    
    SELECT @str AS AutoCode;
END$$

DELIMITER ;
;

USE `testproject`;
DROP procedure IF EXISTS `usp_mst_item_ListData`;

USE `testproject`;
DROP procedure IF EXISTS `testproject`.`usp_mst_item_ListData`;
;

DELIMITER $$
USE `testproject`$$
CREATE DEFINER=`testproject-admin`@`localhost` PROCEDURE `usp_mst_item_ListData`(
	IN PageIndex INT,
    IN PageSize INT,
    IN item_type VARCHAR(50),
    IN SearchBy VARCHAR(50),
    IN Keywords VARCHAR(100),
    OUT RecordCount INT
)
BEGIN
	SET Keywords = REPLACE(Keywords, ';', '%');
    IF Keywords IS NULL THEN SET Keywords = ''; END IF;
    IF SearchBy IS NULL THEN SET SearchBy = ''; END IF;
    IF PageIndex IS NULL THEN SET PageIndex = 1; END IF;
    IF item_type IS NULL THEN SET item_type = ''; END IF;
    
    SET @SQL = '
		FROM mst_item A
        WHERE
			A.rowstatus = 1
    '; 
    
    IF item_type != '' AND item_type IS NOT NULL THEN
		SET @SQL = CONCAT(@SQL, ' AND A.item_type LIKE \'%', item_type, '%\' ');
    END IF;
    
    IF SearchBy = '' OR SearchBy IS NULL THEN
		SET @SQL = CONCAT(@SQL, '
			AND (
				A.item_code LIKE \'%', Keywords, '%\' OR
                A.item_name LIKE \'%', Keywords, '%\'
            )
        ');
	ELSE 
		SET @SQL = CONCAT(@SQL, 'AND ', SearchBy, ' LIKE \'%', Keywords, '%\'');
	END IF;
    
    SET @CountSQL = CONCAT('SELECT COUNT(*) INTO @RecordCount', @SQL);
    
    PREPARE count_stmt FROM @CountSQL;
	EXECUTE count_stmt;
	DEALLOCATE PREPARE count_stmt; 
    
    SET RecordCount = @RecordCount;
    
    SET @SQL = CONCAT('
		SELECT
			ROW_NUMBER() OVER(ORDER BY A.item_code) AS no,
			A.*
    ', @SQL);
    
    IF PageSize IS NOT NULL THEN
		SET @SQL = CONCAT(
			'SELECT * FROM (', @SQL, ') Z WHERE Z.No BETWEEN ', 
            ((PageIndex - 1) * PageSize + 1), ' AND ', ((PageIndex - 1) * PageSize + PageSize)
        );
	END IF;
    
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
END$$

DELIMITER ;
;

USE `testproject`;
DROP procedure IF EXISTS `usp_mst_item_SaveUpdate`;

USE `testproject`;
DROP procedure IF EXISTS `testproject`.`usp_mst_item_SaveUpdate`;
;

DELIMITER $$
USE `testproject`$$
CREATE DEFINER=`testproject-admin`@`localhost` PROCEDURE `usp_mst_item_SaveUpdate`(
	IN uid VARCHAR(50),
    IN item_code VARCHAR(50),
    IN item_name VARCHAR(100),
    IN price NUMERIC(26, 4),
    IN item_type VARCHAR(50),
    IN rowstatus INT,
    IN modified_by VARCHAR(100)
)
BEGIN
	IF NOT EXISTS (SELECT 1 FROM mst_item A WHERE A.uid = uid) THEN
		INSERT INTO mst_item(
			uid, item_code, item_name, price, item_type,
            rowstatus, created_by, created_date,
            modified_by, modified_date
        ) 
        VALUES(
			uid, item_code, item_name, price, item_type,
            rowstatus, modified_by, current_timestamp(),
             modified_by, current_timestamp()
        );
    ELSE
		UPDATE mst_item A
        SET
			A.item_name = item_name,
            A.price = price,
            A.item_type = item_type,
            A.rowstatus = rowstatus,
            A.modified_by = modified_by,
            A.modified_date = current_timestamp()
		WHERE A.uid = uid;
    END IF;
END$$

DELIMITER ;
;

USE `testproject`;
DROP procedure IF EXISTS `usp_mst_bahan_ListData`;

USE `testproject`;
DROP procedure IF EXISTS `testproject`.`usp_mst_bahan_ListData`;
;

DELIMITER $$
USE `testproject`$$
CREATE DEFINER=`testproject-admin`@`localhost` PROCEDURE `usp_mst_bahan_ListData`(
	IN PageIndex INT,
    IN PageSize INT,
    IN SearchBy VARCHAR(50),
    IN Keywords VARCHAR(100),
    OUT RecordCount INT
)
BEGIN
	SET Keywords = REPLACE(Keywords, ';', '%');
    IF Keywords IS NULL THEN SET Keywords = ''; END IF;
    IF SearchBy IS NULL THEN SET SearchBy = ''; END IF;
    IF PageIndex IS NULL THEN SET PageIndex = 1; END IF;
    
    SET @SQL = '
		FROM mst_bahan A
        WHERE
			A.rowstatus = 1
    ';  
    
    IF SearchBy = '' OR SearchBy IS NULL THEN
		SET @SQL = CONCAT(@SQL, '
			AND (
				A.bahan_code LIKE \'%', Keywords, '%\' OR
                A.bahan_name LIKE \'%', Keywords, '%\'
            )
        ');
	ELSE 
		SET @SQL = CONCAT(@SQL, 'AND ', SearchBy, ' LIKE \'%', Keywords, '%\'');
	END IF;
    
    SET @CountSQL = CONCAT('SELECT COUNT(*) INTO @RecordCount', @SQL);
    
    PREPARE count_stmt FROM @CountSQL;
	EXECUTE count_stmt;
	DEALLOCATE PREPARE count_stmt; 
    
    SET RecordCount = @RecordCount;
    
    SET @SQL = CONCAT('
		SELECT
			ROW_NUMBER() OVER(ORDER BY A.bahan_code) AS no,
			A.*
    ', @SQL);
    
    IF PageSize IS NOT NULL THEN
		SET @SQL = CONCAT(
			'SELECT * FROM (', @SQL, ') Z WHERE Z.No BETWEEN ', 
            ((PageIndex - 1) * PageSize + 1), ' AND ', ((PageIndex - 1) * PageSize + PageSize)
        );
	END IF;
    
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
END$$

DELIMITER ;
;

USE `testproject`;
DROP procedure IF EXISTS `usp_mst_bahan_SaveUpdate`;

USE `testproject`;
DROP procedure IF EXISTS `testproject`.`usp_mst_bahan_SaveUpdate`;
;

DELIMITER $$
USE `testproject`$$
CREATE DEFINER=`testproject-admin`@`localhost` PROCEDURE `usp_mst_bahan_SaveUpdate`(
	IN uid VARCHAR(50),
    IN bahan_code VARCHAR(50),
    IN bahan_name VARCHAR(100),
    IN stock_qty NUMERIC(26, 4),
    IN rowstatus INT,
    IN modified_by VARCHAR(100)
)
BEGIN
	IF NOT EXISTS (SELECT 1 FROM mst_bahan A WHERE A.uid = uid) THEN
		INSERT INTO mst_bahan(
			uid, bahan_code, bahan_name, stock_qty,
            rowstatus, created_by, created_date,
            modified_by, modified_date
        ) 
        VALUES(
			uid, bahan_code, bahan_name, stock_qty,
            rowstatus, modified_by, current_timestamp(),
			modified_by, current_timestamp()
        ); 
    ELSE
		UPDATE mst_bahan A
        SET
			A.bahan_name = bahan_name,
            A.stock_qty = stock_qty,
            A.rowstatus = rowstatus,
            A.modified_by = modified_by,
            A.modified_date = current_timestamp()
		WHERE A.uid = uid;
    END IF;
END$$

DELIMITER ;
;

USE `testproject`;
DROP procedure IF EXISTS `usp_mst_item_recipe_SaveUpdate`;

USE `testproject`;
DROP procedure IF EXISTS `testproject`.`usp_mst_item_recipe_SaveUpdate`;
;

DELIMITER $$
USE `testproject`$$
CREATE DEFINER=`testproject-admin`@`localhost` PROCEDURE `usp_mst_item_recipe_SaveUpdate`(
	IN uid VARCHAR(50),
    IN item_uid VARCHAR(50),
    IN item_code VARCHAR(50),
    IN item_name VARCHAR(100),
    IN bahan_uid VARCHAR(50),
    IN bahan_code VARCHAR(50),
    IN bahan_name VARCHAR(100),
    IN qty NUMERIC(26, 4),
    IN unit_code VARCHAR(50),
    IN rowstatus INT,
    IN modified_by VARCHAR(100)
)
BEGIN
	IF NOT EXISTS (SELECT 1 FROM mst_item_recipe A WHERE A.uid = uid) THEN
		INSERT INTO mst_item_recipe(
			uid, item_uid, item_code, item_name,
            bahan_uid, bahan_code, bahan_name, qty, unit_code,
            rowstatus, created_by, created_date,
            modified_by, modified_date
        ) 
        VALUES( 
			uid, item_uid, item_code, item_name,
            bahan_uid, bahan_code, bahan_name, qty, unit_code,
            rowstatus, modified_by, current_timestamp(),
			modified_by, current_timestamp()
        );
    ELSE 
		UPDATE mst_item_recipe A
        SET
			A.bahan_uid = bahan_uid,
            A.bahan_code = bahan_code,
            A.bahan_name = bahan_name,
            A.qty = qty,
            A.unit_code = unit_code,
            A.rowstatus = rowstatus,
            A.modified_by = modified_by,
            A.modified_date = current_timestamp() 
		WHERE A.uid = uid;
    END IF;
END$$

DELIMITER ;
;

USE `testproject`;
DROP procedure IF EXISTS `usp_mst_item_recipe_ListData`;

USE `testproject`;
DROP procedure IF EXISTS `testproject`.`usp_mst_item_recipe_ListData`;
;

DELIMITER $$
USE `testproject`$$
CREATE DEFINER=`testproject-admin`@`localhost` PROCEDURE `usp_mst_item_recipe_ListData`(
	IN PageIndex INT,
    IN PageSize INT,
    IN item_uid VARCHAR(50),
    IN item_code VARCHAR(50),
    IN SearchBy VARCHAR(50),
    IN Keywords VARCHAR(100),
    OUT RecordCount INT
)
BEGIN
	SET Keywords = REPLACE(Keywords, ';', '%');
    IF Keywords IS NULL THEN SET Keywords = ''; END IF;
    IF SearchBy IS NULL THEN SET SearchBy = ''; END IF;
    IF PageIndex IS NULL THEN SET PageIndex = 1; END IF;
    IF item_uid IS NULL THEN SET item_uid = ''; END IF;
    IF item_code IS NULL THEN SET item_code = ''; END IF;
    
    SET @SQL = '
		FROM mst_item_recipe A
        WHERE
			A.rowstatus = 1
    '; 
    
    SET @SQL = CONCAT(@SQL, ' AND A.item_uid = \'', item_uid, '\' ');
    SET @SQL = CONCAT(@SQL, ' AND A.item_code = \'', item_code, '\' ');
    
    IF SearchBy = '' OR SearchBy IS NULL THEN
		SET @SQL = CONCAT(@SQL, '
			AND (
				A.bahan_code LIKE \'%', Keywords, '%\' OR
                A.bahan_name LIKE \'%', Keywords, '%\'
            )
        ');
	ELSE 
		SET @SQL = CONCAT(@SQL, 'AND ', SearchBy, ' LIKE \'%', Keywords, '%\'');
	END IF;
    
    SET @CountSQL = CONCAT('SELECT COUNT(*) INTO @RecordCount', @SQL);
    
    PREPARE count_stmt FROM @CountSQL;
	EXECUTE count_stmt;
	DEALLOCATE PREPARE count_stmt; 
    
    SET RecordCount = @RecordCount;
    
    SET @SQL = CONCAT('
		SELECT
			ROW_NUMBER() OVER(ORDER BY A.created_date) AS no,
			A.*
    ', @SQL);
    
    IF PageSize IS NOT NULL THEN
		SET @SQL = CONCAT(
			'SELECT * FROM (', @SQL, ') Z WHERE Z.No BETWEEN ', 
            ((PageIndex - 1) * PageSize + 1), ' AND ', ((PageIndex - 1) * PageSize + PageSize)
        );
	END IF;
    
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
END$$

DELIMITER ;
;

USE `testproject`;
DROP procedure IF EXISTS `proc_GetData`;

USE `testproject`;
DROP procedure IF EXISTS `testproject`.`proc_GetData`;
;

DELIMITER $$
USE `testproject`$$
CREATE DEFINER=`testproject-admin`@`localhost` PROCEDURE `proc_GetData`(
	IN table_name varchar(50),
    IN fields varchar(500)
)
BEGIN
	SET @SQL = CONCAT('SELECT ', fields, ' FROM ', table_name);
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;  
END$$

DELIMITER ;
;

USE `testproject`;
DROP procedure IF EXISTS `usp_mst_unit_ListData`;

DELIMITER $$
USE `testproject`$$
CREATE PROCEDURE `usp_mst_unit_ListData`(
	IN PageIndex INT,
    IN PageSize INT,
    IN SearchBy VARCHAR(50),
    IN Keywords VARCHAR(100),
    OUT RecordCount INT
)
BEGIN
	SET Keywords = REPLACE(Keywords, ';', '%');
    IF Keywords IS NULL THEN SET Keywords = ''; END IF;
    IF SearchBy IS NULL THEN SET SearchBy = ''; END IF;
    IF PageIndex IS NULL THEN SET PageIndex = 1; END IF;
    
    SET @SQL = '
		FROM mst_unit A
        WHERE
			A.rowstatus = 1
    ';  
    
    IF SearchBy = '' OR SearchBy IS NULL THEN
		SET @SQL = CONCAT(@SQL, '
			AND (
				A.unit_code LIKE \'%', Keywords, '%\' OR
                A.unit_name LIKE \'%', Keywords, '%\'
            )
        ');
	ELSE 
		SET @SQL = CONCAT(@SQL, 'AND ', SearchBy, ' LIKE \'%', Keywords, '%\'');
	END IF;
    
    SET @CountSQL = CONCAT('SELECT COUNT(*) INTO @RecordCount', @SQL);
    
    PREPARE count_stmt FROM @CountSQL;
	EXECUTE count_stmt;
	DEALLOCATE PREPARE count_stmt; 
    
    SET RecordCount = @RecordCount;
    
    SET @SQL = CONCAT('
		SELECT
			ROW_NUMBER() OVER(ORDER BY A.unit_code) AS no,
			A.*
    ', @SQL);
    
    IF PageSize IS NOT NULL THEN
		SET @SQL = CONCAT(
			'SELECT * FROM (', @SQL, ') Z WHERE Z.No BETWEEN ', 
            ((PageIndex - 1) * PageSize + 1), ' AND ', ((PageIndex - 1) * PageSize + PageSize)
        );
	END IF;
    
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt; 
END$$

DELIMITER ;

USE `testproject`;
DROP procedure IF EXISTS `usp_mst_unit_SaveUpdate`;

USE `testproject`;
DROP procedure IF EXISTS `testproject`.`usp_mst_unit_SaveUpdate`;
;

DELIMITER $$
USE `testproject`$$
CREATE DEFINER=`testproject-admin`@`localhost` PROCEDURE `usp_mst_unit_SaveUpdate`(
	IN uid VARCHAR(50),
    IN unit_code VARCHAR(50),
    IN unit_name VARCHAR(100),
    IN rowstatus INT,
    IN modified_by VARCHAR(100)
)
BEGIN
	IF NOT EXISTS (SELECT 1 FROM mst_unit A WHERE A.uid = uid) THEN
		INSERT INTO mst_unit(
			uid, unit_code, unit_name,
            rowstatus, created_by, created_date,
            modified_by, modified_date
        ) 
        VALUES(
			uid, unit_code, unit_name,
            rowstatus, modified_by, current_timestamp(),
			modified_by, current_timestamp()
        );
    ELSE
		UPDATE mst_unit A
        SET
			A.unit_name = unit_name,
            A.rowstatus = rowstatus,
            A.modified_by = modified_by,
            A.modified_date = current_timestamp()
		WHERE A.uid = uid;
    END IF;
END$$

DELIMITER ;
;

